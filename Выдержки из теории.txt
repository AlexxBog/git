### Хэш

Основной индификаторр коммита
При чтении одним и том-же способом выдает одинаковый результат, автора, название и содержимое
При необходимости указать нужный коммит передается хэш другому человеки
в мастер папке есть хайл .git хранящий эти хэши

### HEAD

HEAD указывает на последний коммит
Сам файл лежит в папке .git и хранит адрес последнего коммита refs/heads/master
если перейти по cat refs/heads/master то получим хэш последнего коммита

### Статусы файлов в git

untracked - Мы говорили, что новые файлы в Git-репозитории помечаются как untracked, то есть неотслеживаемые. 
Git «видит», что такой файл существует, но не следит за изменениями в нём. 
У untracked-файла нет предыдущих версий, зафиксированных в коммитах или через команду git add.

staged -  index (англ. «каталог») или cache (англ. «кеш»).  После выполнения команды git add файл попадает в staging area (от англ. stage — «сцена», «этап [процесса]» и area — «область»), 
то есть в список файлов, которые войдут в коммит. В этот момент файл находится в состоянии staged.

tracked - Состояние tracked — это противоположность untracked. 
Оно довольно широкое по смыслу: в него попадают файлы, которые уже были зафиксированы с помощью git commit, а также файлы, которые были добавлены в staging area командой git add. 
То есть все файлы, в которых Git так или иначе отслеживает изменения.

modified - Состояние modified означает, что Git сравнил содержимое файла с последней сохранённой версией и нашёл отличия. 
Например, файл был закоммичен и после этого изменён.

Файлы могут св ююнаходиться в 2 разных состояниях

### Сообщения коммитов

- Развернутое сообщение в инфинитиве
- Желательно прикрепить задачи

### Mermaid

Скрины приложены

### Исправление коммита

--amend - работает только для последнего коммита HEAD
'''
#добавили в коммит 1 файл, что бы добавить в этот-же комит еще файл нужно сделать:

git add common.css
# добавили файл common.css в список на коммит как обычно

# но вместо команды commit -m '...'
# будет:
git commit --amend --no-edit

git log --oneline
8340eb2 Добавить главную страницу

a31fa24 Добавить главную страницу и стили
# коммит в истории всё ещё один (но у него новый хеш)
'''

--no-edit - ключ говорит о том что комментарий к комиту менять не нужно

Пример как поменять коммент коммита
'''
$ git commit --amend -m "Добавить главную страницу и стили"
$ git log --oneline
'''

### Откат изменений

git restore --staged <file> - убрать файл из состояния staged (Файл после git add)
git restore --staged . - Чтобы «сбросить» все файлы из staged обратно в untracked/modified, можно воспользоваться командой git restore --staged .: она сбросит всю текущую папку (.).
git reset --hard <commit hash> -откат к указанному коммиту. Последний коммит удалится
git restore <file> - Мы изменили файл, но еще его не добавляли и не коммитили. Чтоб откатить его до версии HEAD нужно выполнить операцию.

### Просмотр изменений

git diff - покажет изменения только в modified файлах
git diff --staged - используется для просмотра изменений в состоянии staged (Файл после git add)

### Сопоставлять коммиты

git diff <хэшь коммита1> <хэшь коммита2> - стравнит 2 коммита
ОТ порядка зависит и выводимая информация

### Игнорирование файлов

- Создаем файл .gitignore, в нем указываем все файлы которые не должны попадать в коммит
- Файлы должны быть untracked
- # можно комментить файлы
- * маска названия (*.jpeg или docs/*/tmp)
- ? соответствует одному любому символу (file?.txt)
- [] игнорирует перечьнь файлов указанных в скобках (file[0-2].txt)
- /todo.txt - игнорировать todo.txt в корне репозитория. spam.txt - для сравнения: spam.txt будет игнорироваться во всех папках
- build/ - игнорировать папку build
- # игнорировать файлы "docs/current/tmp", "docs/old/tmp",
  # а также "docs/old/saved/a/b/c/d/tmp"
  # и даже "docs/tmp", потому что ноль вложенных папок тоже подходит
  docs/**/tmp

  # игнорировать только "docs/current/tmp" и "docs/old/tmp"
  # файл "docs/old/saved/a/b/c/d/tmp" не попадает в правило
  docs/*/tmp 
- ! инвертировать
  # игнорировать все JPEG-файлы
  *.jpeg

  # но только не мем с Doge
  !doge.jpeg 
- git status --ignored - отобразятся все игнорируемые файлы
